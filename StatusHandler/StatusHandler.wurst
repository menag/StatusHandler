package StatusHandler

import ClosureTimers
import StatusHandlerConfig

constant int STUN_ORDER_ID = 852231
constant int SILENCE_ORDER_ID = 852668
constant int DISARM_BOTH_ORDER_ID = 852585
constant int DISARM_MELEE_ORDER_ID = 852585
constant int DISARM_RANGED_ORDER_ID = 852585
constant int ENSNARE_ORDER_ID = 852106

unit array statusDummy1
int maxStatusDummy1 = -1

function getStatusDummy1() returns unit
	if maxStatusDummy1 >= 0
		print("get: " + maxStatusDummy1.toString())
		maxStatusDummy1--
		return statusDummy1[maxStatusDummy1 + 1]
	return CreateUnit(DUMMY_PLAYER, DUMMY_UNIT_ID, 0., 0., 0.)
		..hide()
		..addAbility(STUN_ABILITY_ID)
		..addAbility(DISARM_BOTH_ABILITY_ID)
		
function releaseStatusDummy1(unit u)
	nullTimer(() -> begin
		if maxStatusDummy1 < 8190
			maxStatusDummy1++
			statusDummy1[maxStatusDummy1] = u
		else
			u.remove()
	end)

unit array statusDummy2
int maxStatusDummy2 = -1

function getStatusDummy2() returns unit
	if maxStatusDummy2 >= 0
		maxStatusDummy2--
		return statusDummy2[maxStatusDummy2 + 1]
	return CreateUnit(DUMMY_PLAYER, DUMMY_UNIT_ID, 0., 0., 0.)
		..hide()
		..addAbility(SILENCE_ABILITY_ID)
		..addAbility(DISARM_MELEE_ABILITY_ID)
		
function releaseStatusDummy2(unit u)
	nullTimer(() -> begin
		if maxStatusDummy2 < 8190
			maxStatusDummy2++
			statusDummy2[maxStatusDummy2] = u
		else
			u.remove()
	end)

unit array statusDummy3
int maxStatusDummy3 = -1
				
function getStatusDummy3() returns unit
	if maxStatusDummy3 >= 0
		maxStatusDummy3--
		return statusDummy3[maxStatusDummy3 + 1]
	return CreateUnit(DUMMY_PLAYER, DUMMY_UNIT_ID, 0., 0., 0.)
		..hide()
		..addAbility(ENSNARE_ABILITY_ID)
		..addAbility(DISARM_RANGED_ABILITY_ID)
		
function releaseStatusDummy3(unit u)
	nullTimer(() -> begin
		if maxStatusDummy3 < 8190
			maxStatusDummy3++
			statusDummy3[maxStatusDummy3] = u
		else
			u.remove()
	end)

public class Status
	protected static Status array status
	protected timer stunTimer
	protected timer silenceTimer
	protected timer disarmBothTimer
	protected timer disarmMeleeTimer
	protected timer disarmRangedTimer
	protected timer ensnareTimer
	protected int stunCounter
	protected int silenceCounter
	protected int disarmBothCounter
	protected int disarmMeleeCounter
	protected int disarmRangedCounter
	protected int ensnareCounter
	
	construct(int i)
		status[i] = this
		stunTimer = null
		silenceTimer = null
		disarmBothTimer = null
		disarmMeleeTimer = null
		disarmRangedTimer = null
		ensnareTimer = null
		stunCounter = 0
		silenceCounter = 0
		disarmBothCounter = 0
		disarmMeleeCounter = 0
		disarmRangedCounter = 0
		ensnareCounter = 0
		
	ondestroy
		if stunTimer != null
			stunTimer.release()
		if silenceTimer != null
			silenceTimer.release()
		if disarmBothTimer != null
			disarmBothTimer.release()
		if disarmMeleeTimer != null
			disarmMeleeTimer.release()
		if disarmRangedTimer != null
			disarmRangedTimer.release()
		if ensnareTimer != null
			ensnareTimer.release()

public function unit.addStun()
	if not this.isStunned()
		releaseStatusDummy1(getStatusDummy1()..issueTargetOrderById(STUN_ORDER_ID, this))
	Status.status[this.getIndex()].stunCounter++

public function unit.removeStun()
	Status.status[this.getIndex()].stunCounter--
	if not this.isStunned()
		this.removeAbility(STUN_BUFF_ID)
	
public function unit.addStunTimed(real timeout)
	int i = this.getIndex()
	if Status.status[i].stunTimer != null and Status.status[i].stunTimer.getRemaining() >= timeout
		return
		
	if Status.status[i].stunTimer == null
		Status.status[i].stunTimer = getTimer()..setData(i)
		this.addStun()
	
	Status.status[i].stunTimer.start(timeout, () -> begin
		int j = GetExpiredTimer().getData()
		j.getUnit().removeStun()
		Status.status[j].stunTimer.release()
		Status.status[j].stunTimer = null
	end)
	
public function unit.isStunned() returns boolean
	return Status.status[this.getIndex()].stunCounter > 0
	
public function unit.addSilence()
	if not this.isSilenced()
		releaseStatusDummy2(getStatusDummy2()..issueTargetOrderById(SILENCE_ORDER_ID, this))
	Status.status[this.getIndex()].silenceCounter++

public function unit.removeSilence()
	Status.status[this.getIndex()].silenceCounter--
	if not this.isSilenced()
		this.removeAbility(SILENCE_BUFF_ID)
	
public function unit.addSilenceTimed(real timeout)
	int i = this.getIndex()
	if Status.status[i].silenceTimer != null and Status.status[i].silenceTimer.getRemaining() >= timeout
		return
		
	if Status.status[i].silenceTimer == null
		Status.status[i].silenceTimer = getTimer()..setData(i)
		this.addSilence()
	
	Status.status[i].silenceTimer.start(timeout, () -> begin
		int j = GetExpiredTimer().getData()
		j.getUnit().removeSilence()
		Status.status[j].silenceTimer.release()
		Status.status[j].silenceTimer = null
	end)
	
public function unit.isSilenced() returns boolean
	return Status.status[this.getIndex()].silenceCounter > 0
	
public function unit.addEnsnare()
	if not this.isEnsnared()
		releaseStatusDummy3(getStatusDummy2()..issueTargetOrderById(ENSNARE_ORDER_ID, this))
	Status.status[this.getIndex()].ensnareCounter++

public function unit.removeEnsnare()
	Status.status[this.getIndex()].ensnareCounter--
	if not this.isEnsnared()
		this.removeAbility(ENSNARE1_BUFF_ID)
		this.removeAbility(ENSNARE2_BUFF_ID)

public function unit.addEnsnareTimed(real timeout)
	int i = this.getIndex()
	if Status.status[i].ensnareTimer != null and Status.status[i].ensnareTimer.getRemaining() >= timeout
		return
		
	if Status.status[i].ensnareTimer == null
		Status.status[i].ensnareTimer = getTimer()..setData(i)
		this.addEnsnare()
		
	Status.status[i].ensnareTimer.start(timeout, () -> begin
		int j = GetExpiredTimer().getData()
		j.getUnit().removeEnsnare()
		Status.status[j].ensnareTimer.release()
		Status.status[j].ensnareTimer = null
	end)
		
public function unit.isEnsnared() returns boolean
	return Status.status[this.getIndex()].ensnareCounter > 0
	
public function unit.addDisarmBoth()
	if not this.isDisarmedBoth()
		releaseStatusDummy1(getStatusDummy1()..issueTargetOrderById(DISARM_BOTH_ORDER_ID, this))
	Status.status[this.getIndex()].disarmBothCounter++

public function unit.removeDisarmBoth()
	Status.status[this.getIndex()].disarmBothCounter--
	if not this.isDisarmedBoth()
		this.removeAbility(DISARM_BOTH_BUFF_ID)

public function unit.addDisarmBothTimed(real timeout)
	int i = this.getIndex()
	if Status.status[i].disarmBothTimer != null and Status.status[i].disarmBothTimer.getRemaining() >= timeout
		return
		
	if Status.status[i].disarmBothTimer == null
		Status.status[i].disarmBothTimer = getTimer()..setData(i)
		this.addDisarmBoth()
	
	Status.status[i].disarmBothTimer.start(timeout, () -> begin
		int j = GetExpiredTimer().getData()
		j.getUnit().removeDisarmBoth()
		Status.status[j].disarmBothTimer.release()
		Status.status[j].disarmBothTimer = null
	end)
	
public function unit.isDisarmedBoth() returns boolean
	return Status.status[this.getIndex()].disarmBothCounter > 0
	
public function unit.addDisarmMelee()
	if not this.isDisarmedMelee()
		releaseStatusDummy2(getStatusDummy2()..issueTargetOrderById(DISARM_MELEE_ORDER_ID, this))
	Status.status[this.getIndex()].disarmMeleeCounter++

public function unit.removeDisarmMelee()
	Status.status[this.getIndex()].disarmMeleeCounter--
	if not this.isDisarmedMelee()
		this.removeAbility(DISARM_MELEE_BUFF_ID)

public function unit.addDisarmMeleeTimed(real timeout)
	int i = this.getIndex()
	if Status.status[i].disarmMeleeTimer != null and Status.status[i].disarmMeleeTimer.getRemaining() >= timeout
		return
		
	if Status.status[i].disarmMeleeTimer == null
		Status.status[i].disarmMeleeTimer = getTimer()..setData(i)
		this.addDisarmMelee()
		
	Status.status[i].disarmMeleeTimer.start(timeout, () -> begin
		int j = GetExpiredTimer().getData()
		j.getUnit().removeDisarmMelee()
		Status.status[j].disarmMeleeTimer.release()
		Status.status[j].disarmMeleeTimer = null
	end)
	
public function unit.isDisarmedMelee() returns boolean
	return Status.status[this.getIndex()].disarmMeleeCounter > 0
	
public function unit.addDisarmRanged()
	if not this.isDisarmedRanged()
		releaseStatusDummy3(getStatusDummy3()..issueTargetOrderById(DISARM_RANGED_ORDER_ID, this))
	Status.status[this.getIndex()].disarmRangedCounter++

public function unit.removeDisarmRanged()
	Status.status[this.getIndex()].disarmRangedCounter--
	if not this.isDisarmedRanged()
		this.removeAbility(DISARM_RANGED_BUFF_ID)

public function unit.addDisarmRangedTimed(real timeout)
	int i = this.getIndex()
	if Status.status[i].disarmRangedTimer != null and Status.status[i].disarmRangedTimer.getRemaining() >= timeout
		return
		
	if Status.status[i].disarmRangedTimer == null
		Status.status[i].disarmRangedTimer = getTimer()..setData(i)
		this.addDisarmRanged()
		
	Status.status[i].disarmRangedTimer.start(timeout, () -> begin
		int j = GetExpiredTimer().getData()
		j.getUnit().removeDisarmRanged()
		Status.status[j].disarmRangedTimer.release()
		Status.status[j].disarmRangedTimer = null
	end)
	
public function unit.isDisarmedRanged() returns boolean
	return Status.status[this.getIndex()].disarmRangedCounter > 0
	
init
	for int i = 1 to STATUS_DUMMY_START_AMOUNT
		maxStatusDummy1++
		statusDummy1[maxStatusDummy1] = CreateUnit(DUMMY_PLAYER, DUMMY_UNIT_ID, 0., 0., 0.)
			..hide()
			..addAbility(STUN_ABILITY_ID)
			..addAbility(DISARM_BOTH_ABILITY_ID)
		maxStatusDummy2++
		statusDummy2[maxStatusDummy2] = CreateUnit(DUMMY_PLAYER, DUMMY_UNIT_ID, 0., 0., 0.)
			..hide()
			..addAbility(SILENCE_ABILITY_ID)
			..addAbility(DISARM_MELEE_ABILITY_ID)
		maxStatusDummy3++
		statusDummy3[maxStatusDummy3] = CreateUnit(DUMMY_PLAYER, DUMMY_UNIT_ID, 0., 0., 0.)
			..hide()
			..addAbility(ENSNARE_ABILITY_ID)
			..addAbility(DISARM_RANGED_ABILITY_ID)